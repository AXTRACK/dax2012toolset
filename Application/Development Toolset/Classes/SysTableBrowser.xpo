Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: SysTableBrowser unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysTableBrowser
    PROPERTIES
      Name                #SysTableBrowser
      RunOn               #Client
      Origin              #{2D0F0619-0000-1000-4994-9CE7C0ACF1DE}
      LegacyId            #1561
    ENDPROPERTIES
    
    METHODS
      SOURCE #addField
        #/// <summary>
        #/// Adds the specified field to the grid control.
        #/// </summary>
        #/// <param name="tableId">
        #/// The <c>tableId</c> value that the field is on.
        #/// </param>
        #/// <param name="fieldId">
        #/// The ID of the field.
        #/// </param>
        #/// <param name="formBuildDataSource">
        #/// The <c>FormBuildDataSource</c> on the form.
        #/// </param>
        #/// <param name="formBuildGridControl">
        #/// The grid control on the form.
        #/// </param>
        #/// <param name="allowControlEdit">
        #/// A Boolean value that specifies whether to allow editing of the control.
        #/// </param>
        #protected void addField(tableId                 tableId,
        #                        fieldId                 fieldId,
        #                        FormBuildDataSource     formBuildDataSource,
        #                        FormBuildGridControl    formBuildGridControl,
        #                        boolean                 allowControlEdit,
        #                        boolean                 _displayLabels  = false) // DEV:MXK
        #{
        #    FormBuildStringControl formBuildStringControl;
        #    Object formBuildControl;
        #    SysDictField dictField;
        #    int j;
        #    tableId rootTableId;
        #
        #    // >> DEV:MXK >>
        #    #Properties
        #    int                 colorWhite          = WinAPI::RGB2int(255, 255, 255);   // white
        #    int                 colorghostWhite     = WinAPI::RGB2int(248, 248, 255);   // ghostwhite
        #    int                 colorLightRed       = WinAPI::RGB2int(255, 235, 235);   // lightred
        #    int                 colorLightGreen     = WinAPI::RGB2int(230, 255, 230);   // lightgreen
        #    int                 colorLightYellow    = WinAPI::RGB2int(255, 255, 230);   // lightyellow
        #
        #    FormControlType     formControlType;
        #
        #    void setColor(Object _control)
        #    {
        #        if (_control && dictField)
        #        {
        #            _control.colorScheme(FormColorScheme::RGB);
        #            _control.backgroundColor(       dictField.isSystem()
        #                                        ?   colorLightGreen
        #                                        :   dictField.mandatory()
        #                                        ?   colorLightRed
        #                                        :   dictField.visible() == false
        #                                        ?   colorLightYellow
        #                                        :   dictField.allowEdit() == false
        #                                        ?   colorghostWhite
        #                                        :   colorWhite);
        #        }
        #    }
        #    // >> DEV:MXK <<
        #
        #    dictField = new SysDictField(tableId, fieldId);
        #    if(dictField.isSystem())
        #    {
        #        //System fields are only stored on the root table, so get the information from there.
        #        rootTableId = SysDictTable::getRootTable(tableId);
        #        dictField = new SysDictField(rootTableId, fieldId);
        #    }
        #
        #    if (dictField.saveContents())
        #    {
        #        // >> DEV:MXK >>
        #        if (! dictField.visible())
        #        {
        #            switch (dictField.baseType())
        #            {
        #                case Types::Integer         : formControlType = FormControlType::Integer; break;
        #                case Types::Int64           : formControlType = FormControlType::Int64; break;
        #                case Types::Guid            : formControlType = FormControlType::Guid; break;
        #                case Types::Real            : formControlType = FormControlType::Real; break;
        #                case Types::Date            : formControlType = FormControlType::Date; break;
        #                case Types::Time            : formControlType = FormControlType::Time; break;
        #                case Types::UtcDateTime     : formControlType = FormControlType::DateTime; break;
        #                default                     : formControlType = FormControlType::String;
        #            }
        #
        #            formBuildControl = formBuildGridControl.addControl(formControlType, dictField.name());
        #            formBuildControl.label(dictField.name());
        #            formBuildControl.helpText(dictField.label());
        #            formBuildControl.allowEdit(false);
        #            setColor(formBuildControl);
        #            return;
        #        }
        #        // >> DEV:MXK <<
        #        for(j = 1;j <= dictField.arraySize(); j++)
        #        {
        #            if (dictField.baseType() == Types::String ||
        #                dictField.baseType() == Types::RString ||
        #                dictField.baseType() == Types::VarString)
        #            {
        #                formBuildStringControl = formBuildGridControl.addDataField(formBuildDataSource.id(), fieldId, j);
        #                formBuildStringControl.displayHeightMode(0);
        #                formBuildStringControl.displayHeightValue(1);
        #                // >> DEV:MXK >>
        #                //formBuildStringControl.label(dictField.name());
        #                //formBuildStringControl.helpText(dictField.label());
        #                formBuildStringControl.label(_displayLabels ? dictField.label() : dictField.name());
        #                formBuildStringControl.helpText(dictField.help(j));
        #                // << DEV:MXK <<
        #                formBuildStringControl.allowEdit(allowControlEdit);
        #                // >> DEV:MXK >>
        #                formBuildStringControl.displayLengthMode(0);
        #                formBuildStringControl.displayLengthValue(20);
        #                setColor(formBuildStringControl);
        #                // << DEV:MXK <<
        #            }
        #            else if(dictField.baseType() == Types::Int64)
        #            {
        #                // Reference Controls are created by default for surrogate foreign keys. However, the raw 64-bit
        #                // integer should always be displayed. Force all Int64 type fields to use an Int64 Control.
        #                formBuildControl = formBuildGridControl.addControl(FormControlType::Int64, dictField.name());
        #                formBuildControl.datasource(formBuildDataSource.id());
        #                formBuildControl.dataField(fieldId2Ext(fieldId,j));
        #                // >> DEV:MXK >>
        #                //formBuildControl.label(dictField.name());
        #                //formBuildControl.helpText(dictField.label());
        #                formBuildControl.label(_displayLabels ? dictField.label() : dictField.name());
        #                formBuildControl.helpText(dictField.help(j));
        #                // << DEV:MXK <<
        #                formBuildControl.allowEdit(allowControlEdit);
        #                // >> DEV:MXK >>
        #                setColor(formBuildControl);
        #                // << DEV:MXK <<
        #            }
        #            else
        #            {
        #                if (dictField.baseType() != Types::Container)
        #                {
        #                    formBuildControl = formBuildGridControl.addDataField(formBuildDataSource.id(), fieldId, j);
        #                    // >> DEV:MXK >>
        #                    //formBuildControl.label(dictField.name());
        #                    //formBuildControl.helpText(dictField.label());
        #                    formBuildControl.label(_displayLabels ? dictField.label() : dictField.name());
        #                    formBuildControl.helpText(dictField.help(j));
        #                    // << DEV:MXK <<
        #                    formBuildControl.allowEdit(allowControlEdit);
        #                    // >> DEV:MXK >>
        #                    setColor(formBuildControl);
        #                    // << DEV:MXK <<
        #                }
        #                else
        #                {
        #                    formBuildControl = formBuildGridControl.addControl(FormControlType::String,'TableBrowserContainer');
        #                    formBuildControl.datasource(formBuildDataSource.id());
        #                    formBuildControl.dataField(fieldId2Ext(fieldId,j));
        #                    // >> DEV:MXK >>
        #                    //formBuildControl.label(dictField.name());
        #                    //formBuildControl.helpText(dictField.label());
        #                    formBuildControl.label(_displayLabels ? dictField.label() : dictField.name());
        #                    formBuildControl.helpText(dictField.help(j));
        #                    // << DEV:MXK <<
        #                    formBuildControl.displayLengthMode(0);
        #                    formBuildControl.displayLengthValue(5);
        #                    formBuildControl.lookupButton(2);
        #                    // >> DEV:MXK >>
        #                    setColor(formBuildControl);
        #                    // << DEV:MXK <<
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysTableBrowser
        #{
        #    boolean     allowEdit;
        #    boolean     allowDelete;
        #    boolean     allowCreate;
        #    indexId     defaultIndexId;
        #
        #    #DEFINE.FormWidth(500)
        #    #DEFINE.FormHeight(300)
        #
        #    // >> DEV:MXK >>
        #    List        allFields;
        #    // << DEV:MXK <<
        #}
      ENDSOURCE
      SOURCE #getAllFields
        #// >> DEV:MXK >>
        #public List getAllFields()
        #{
        #    return allFields;
        #}
        #// << DEV:MXK <<
      ENDSOURCE
      SOURCE #run
        #//AOSRunMode::Client
        #public void run(tableId tableId,
        #                // >> DEV:MXK >>
        #                Common  _tmpBuffer      = null,
        #                boolean _displayLabels  = false)
        #                // << DEV:MXK <<
        #{
        #    Form                            tableBrowser;
        #    Object                          formRun;
        #    FormBuildDesign                 formBuildDesign;
        #    FormBuildDataSource             formBuildDataSource;
        #    FormBuildGridControl            formBuildGridControl1;
        #    //FormBuildGridControl            formBuildGridControl2;
        #    FormGridControl                 formGridControl;
        #    FormRadioControl                formRadioControl;
        #    DictTable                       dictTable;
        #    Args                            args;
        #    Args                            browserArgs;
        #    int                             idx;
        #
        #    dictTable   = new DictTable(tableId);
        #
        #    //If the table is abstract, don't allow creates in SysTableBrowser.
        #    if(dictTable.isAbstract())
        #    {
        #        allowCreate = false;
        #    }
        #
        #    browserArgs     = new Args();
        #    browserArgs.name(formstr(SysTableBrowser));
        #    formRun         = classfactory.formRunClass(browserArgs);
        #    tableBrowser    = formRun.form();
        #
        #    formBuildDataSource = tableBrowser.dataSource(1);
        #    formBuildDataSource.name(dictTable.name());
        #    formBuildDataSource.table(tableId);
        #    formBuildDataSource.autoQuery(true);
        #    formBuildDataSource.linkType(0);
        #    formBuildDataSource.allowCreate(allowCreate);
        #    formBuildDataSource.allowDelete(allowDelete);
        #    formBuildDataSource.allowEdit(allowEdit);
        #    formBuildDataSource.validTimeStateAutoQuery(ValidTimeStateAutoQuery::DateRange);
        #    formBuildDataSource.validTimeStateUpdate(ValidTimeStateUpdate::Correction);
        #
        #    if (defaultIndexId)
        #    {
        #        formBuildDataSource.index(defaultIndexId);
        #    }
        #
        #    formBuildDesign = tableBrowser.design();
        #    formBuildDesign.caption("@SYS54191" + ': ' + dictTable.name());
        #    formBuildDesign.widthMode(-1);
        #    formBuildDesign.widthValue(#FormWidth);
        #    formBuildDesign.heightMode(-1);
        #    formBuildDesign.heightValue(#FormHeight);
        #    // >> DEV:MXK >>
        #    /*formBuildGridControl1 = formBuildDesign.control('allFieldsGrid');
        #    formBuildGridControl1.dataSource(dictTable.name());
        #    formBuildGridControl1.allowEdit(allowEdit);
        #    idx = formBuildGridControl1.id();
        #
        #    this.showAllFields(tableId, formBuildGridControl1, formBuildDataSource);
        #
        #    formBuildGridControl2 = formBuildDesign.control('autoReportGrid');
        #    formBuildGridControl2.dataSource(dictTable.name());
        #    formBuildGridControl2.allowEdit(allowEdit);
        #    formBuildGridControl2.visible(false);
        #
        #    hasAutoReportGroup = this.showAutoFields(tableId, formBuildGridControl2, formBuildDataSource);*/
        #    formBuildGridControl1 = formBuildDesign.addControl(FormControlType::Grid, @'Grid');
        #    formBuildGridControl1.dataSource(dictTable.name());
        #    formBuildGridControl1.allowEdit(allowEdit);
        #    formBuildGridControl1.widthMode(1);
        #    formBuildGridControl1.heightMode(1);
        #    idx = formBuildGridControl1.id();
        #
        #    this.showAllFields(tableId, formBuildGridControl1, formBuildDataSource, _displayLabels);
        #    // << DEV:MXK <<
        #
        #    args = new Args();
        #    args.caller(this); // DEV:MXK
        #    args.object(tableBrowser);
        #    formRun = classfactory.formRunClass(args);
        #
        #    formRun.enableCountryRegion(false);
        #    formRun.init();
        #    formRun.parmTableId(tableId);
        #    // >> DEV:MXK >>
        #    if (_tmpBuffer.TableId < 60535)
        #    {
        #        formRun.parmTmpData(_tmpBuffer);
        #    }
        #    // << DEV:MXK <<
        #    formRun.run();
        #
        #    formRadioControl = formRun.getRadioControl();
        #    formRadioControl.visible(false);//hasAutoReportGroup); // DEV:MXK
        #
        #    formGridControl = formRun.control(idx);
        #    //formGridControl.setFocus(); // DEV:MXK
        #
        #    // This call is here as a hack fix (AXSE:4564 or AX6:18807) for performance issue around Table Browser
        #    // loading time, and should be removed once a proper fix is in place.
        #    formGridControl.autoSizeColumns(false);
        #
        #    formRun.detach();
        #}
      ENDSOURCE
      SOURCE #showAllFields
        #//AOSRunMode::Client
        #protected void showAllFields(tableId              tableId,
        #                             FormBuildGridControl formBuildGridControl,
        #                             FormBuildDataSource  formBuildDataSource,
        #                             boolean              _displayLabels  = false) // DEV:MXK
        #
        #
        #{
        #    DictTable                       dictTable;
        #    DictField                       dictField;
        #    fieldId                         fieldId;
        #    int                             i;
        #    int                             fieldCnt;
        #    Map                             userDefinedFields;
        #    List                            systemFields;
        #    MapEnumerator                   mapIt;
        #    ListEnumerator                  listIt;
        #    // >> DEV:MXK >>
        #    List                            hiddenFields    = new List(Types::Integer);
        #    allFields   = new List(Types::Integer);
        #    // << DEV:MXK <<
        #    userDefinedFields = new Map(Types::String, Types::Integer);
        #    systemFields      = new List(Types::Integer);
        #
        #    dictTable   = new DictTable(tableId);
        #    //Include all of the base table fields so we have "complete records".
        #    fieldCnt = dictTable.fieldCnt(TableScope::IncludeBaseTables);
        #    for (i = 1; i <= fieldCnt; i++)
        #    {
        #        fieldId = dictTable.fieldCnt2Id(i, TableScope::IncludeBaseTables);
        #
        #        dictField = new dictField(tableId, fieldId);
        #        if (dictField)
        #        {
        #            // >> DEV:MXK >>
        #            if (dictField.visible() == false)
        #            {
        #                hiddenFields.addEnd(fieldId);
        #                continue;
        #            }
        #            // << DEV:MXK <<
        #
        #            if (dictField.isSystem())
        #            {
        #                systemFields.addEnd(fieldId);
        #            }
        #            else
        #            {
        #                userDefinedFields.insert(dictField.name(), fieldId);
        #            }
        #        }
        #    }
        #
        #    mapIt = userDefinedFields.getEnumerator();
        #    while (mapIt.moveNext())
        #    {
        #        this.AddField(dictTable.id(), mapIt.currentValue(), formBuildDataSource, formBuildGridControl, true, _displayLabels); // DEV:MXK
        #        allFields.addEnd(mapIt.currentValue()); // DEV:MXK
        #    }
        #
        #    listIt = systemFields.getEnumerator();
        #    while (listIt.moveNext())
        #    {
        #        this.AddField(dictTable.id(), listIt.current(), formBuildDataSource, formBuildGridControl, true, _displayLabels); // DEV:MXK
        #    // >> DEV:MXK >>
        #        allFields.addEnd(listIt.current());
        #    }
        #
        #    listIt = hiddenFields.getEnumerator();
        #    while (listIt.moveNext())
        #    {
        #        this.AddField(dictTable.id(), listIt.current(), formBuildDataSource, formBuildGridControl, true, _displayLabels);
        #        allFields.addEnd(listIt.current());
        #    }
        #    // << DEV:MXK <<
        #}
      ENDSOURCE
      SOURCE #DEV_GetValue
        #// >> DEV:MXK >>
        #static server str DEV_GetValue(str _expression)
        #{
        #    UserConnection                                  connection;
        #    Statement                                       stmt;
        #    ResultSet                                       resultSet;
        #    SqlStatementExecutePermission                   ssep;
        #
        #    connection  = new UserConnection();
        #    stmt        = connection.createStatement();
        #
        #    ssep        =  new SqlStatementExecutePermission(_expression);
        #    ssep.assert();
        #
        #    resultSet   = stmt.executeQuery(_expression);
        #    resultSet.next();
        #
        #    return resultSet.getString(1);
        #}
        #// << DEV:MXK <<
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
