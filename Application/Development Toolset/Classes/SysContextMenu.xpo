Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: SysContextMenu unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysContextMenu
    PROPERTIES
      Name                #SysContextMenu
      RunOn               #Client
      Origin              #{2D0E03C8-0000-1000-FB09-5DBF82A26477}
      LegacyId            #968
    ENDPROPERTIES
    
    METHODS
      SOURCE #verifyItem
        #/// <summary>
        #///    Verifies that the command can be displayed in the context menu.
        #/// </summary>
        #/// <param name="menuItemName">
        #///    The name of the command.
        #/// </param>
        #/// <param name="menuItemType">
        #///    The type of the command.
        #/// </param>
        #/// <returns>
        #///    1 if the command can be displayed; otherwise 0.
        #/// </returns>
        #public int verifyItem(identifierName menuItemName, MenuItemType menuItemType)
        #{
        #    #resAppl
        #    #define.pathProjects('<\\\\Projects\\\\')
        #    #define.pathMethods('\\\\Methods>')
        #
        #    boolean         docNode;
        #    UtilEntryLevel  utilEntryLevel;
        #    ClassNode       classNode;
        #    TreeNode        parentNode;
        #    SysTestable     testable;
        #    ListEnumerator  listEnumerator;
        #    int firstNodeTypeId;
        #
        #    if (!firstNode ||
        #        !this.selectionCount())
        #    {
        #        return 0;
        #    }
        #
        #    if (strStartsWith(firstNode.treeNodePath(), #SystemDocPath))
        #    {
        #        docNode = true;
        #    }
        #
        #    firstNodeTypeId = firstNode.treeNodeType().id();
        #
        #    switch (menuItemType)
        #    {
        #
        #        case MenuItemType::Display:
        #            switch (menuItemName)
        #            {
        #                                 // Security Debug Tool:
        #                // Only show SecObjectsInRole on role nodes under /security/roles
        #                //
        #                case menuitemDisplayStr(SysSecObjectsInRole):
        #                    if ( this.selectionCount() == 1 )
        #                    {
        #                        if (
        #                         _firstType == UtilElementType::SecRole
        #                         ||
        #                         _firstType == UtilElementType::SecDuty
        #                         ||
        #                         _firstType == UtilElementType::SecPrivilege
        #                         ||
        #                         _firstType == UtilElementType::ActionTool
        #                         ||
        #                         _firstType == UtilElementType::DisplayTool
        #                         ||
        #                         _firstType == UtilElementType::OutputTool
        #                         ||
        #                         _firstType == UtilElementType::WebUrlItem
        #                         ||
        #                         _firstType == UtilElementType::WebActionItem
        #                         ||
        #                         _firstType == UtilElementType::WebManagedContentItem
        #                         ||
        #                         firstNodeTypeId == #NT_OPERATION
        #                         )
        #                        {
        #                            return 1;
        #                        }
        #                    }
        #                    return 0;
        #                //
        #                // Security Debug Tool:
        #                // Only show SecObjectsAnalyze on role nodes under
        #                //
        #                case menuitemDisplayStr(SysSecObjectsAnalyze):
        #                    if ( this.selectionCount() == 1 )
        #                    {
        #                        if (
        #                         _firstType == UtilElementType::ActionTool
        #                         ||
        #                         _firstType == UtilElementType::DisplayTool
        #                         ||
        #                         _firstType == UtilElementType::OutputTool
        #                         ||
        #                         _firstType == UtilElementType::Form
        #                         ||
        #                         _firstType == UtilElementType::WebUrlItem
        #                         ||
        #                         _firstType == UtilElementType::WebActionItem
        #                         ||
        #                         _firstType == UtilElementType::WebManagedContentItem
        #                         ||
        #                         _firstType == UtilElementType::SecDuty
        #                         ||
        #                         _firstType == UtilElementType::SecPrivilege
        #                         ||
        #                         _firstType == UtilElementType::Table
        #                         ||
        #                         _firstType == UtilElementType::InfoPart
        #                         ||
        #                         _firstType == UtilElementType::Report
        #                         ||
        #                         _firstType == UtilElementType::WebControl
        #                         ||
        #                         _firstType == UtilElementType::SecCodePermission
        #                         ||
        #                         firstNodeTypeId == #NT_DBVIEW
        #                         ||
        #                         firstNodeTypeId == #NT_OPERATION
        #                         ||
        #                         firstNodeTypeId == #NT_SSRSREPORTDESIGN
        #                        )
        #                        {
        #                            return 1;
        #                        }
        #                    }
        #                    return 0;
        #
        #                //
        #                // Only show 'Xref Analyzer' menu item when the Analyzer form is present
        #                //
        #
        #                case menuitemDisplayStr(SysSecAnalysisAddIn):
        #                    if (this.selectionCount() == 1 &&
        #                        TreeNode::findNode(@'\Forms\SysSecAnalysis') != null)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                //
        #                // Only show 'Metadata Analyzer' menu item when the Analyzer form is present
        #                //
        #                case menuitemDisplayStr(SysSecAnalysisAddInMetadataAnalyzer):
        #                    if (this.selectionCount() == 1                          &&
        #                        (_firstType==UtilElementType::Form                  ||
        #                         _firstType==UtilElementType::DisplayTool           ||
        #                         _firstType==UtilElementType::OutputTool            ||
        #                         _firstType==UtilElementType::ActionTool            ||
        #                         _firstType==UtilElementType::WebActionItem         ||
        #                         _firstType==UtilElementType::WebUrlItem            ||
        #                         _firstType==UtilElementType::WebDisplayContentItem ||
        #                         _firstType==UtilElementType::WebManagedContentItem ||
        #                         _firstType==UtilElementType::WebOutputContentItem) &&
        #                        TreeNode::findNode(@'\Forms\SysSecAnalysisMetadataAnalyzer') != null)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                //
        #                // Only show 'Reverse Engineer'menu item
        #                // on projects and perspective as we only want to reverse
        #                // engineer project elements
        #                //
        #                case menuitemDisplayStr( SysVisioAddIn ):
        #                    if ( firstNode.handle() == classNum(ProjectNode) &&     // launch from project node
        #                         match(#pathProjects,firstNode.treeNodePath()))
        #                    {
        #                        return 1;
        #                    }
        #
        #                    if (firstNode.treeNodeType().id() == #NT_PERSPECTIVE)    // launch from perspective node
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(XRefReferencesUsedBy):
        #                    if (this.selectionCount() == 1 &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        xRefNames::existTreeNodeAnyLayer(this.first()))
        #                        // xRefNames::existTreeNode(this.first(),true))     //only show Used By, if there are anything to show
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(XRefReferencesUsing):
        #                    if (this.selectionCount() == 1 &&
        #                        firstUtilNode &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        xRefPaths::find(SysTreeNode::getPath(this.first())))       // only show Using, if anything are used
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(XRefNames):
        #                    if (this.selectionCount() == 1 &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        xRefNames::existTreeNode(this.first(),false))       // only show Names, if there are anything to show
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(SysTypeHierarchyBrowser):
        #                    if (this.selectionCount() != 1 ||
        #                        firstNode.AOTIsOld()                                //Does not work for old nodes
        #                       )
        #                    {
        #                        return 0;
        #                    }
        #                    if (SysTypeHierarchy::treenode2Type(firstNode, firstApplObjectNode))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(SysTableBrowser):
        #                    if (this.selectionCount() != 1 ||
        #                        firstNode.AOTIsOld()                               //Does not work for old nodes
        #                       )
        #                    {
        #                        return 0;
        #                    }
        #                    if (!docNode &&
        #                        _firstType==UtilElementType::Table)
        #                    {
        #                        return 1;
        #                    }
        #                    return this.verifyDatasource();
        #
        #                case menuitemDisplayStr(SysTableForm):
        #                    if (aUtilElementTypeSeleced[UtilElementType::Table + 1] &&
        #                        !firstNode.AOTIsOld()                               //Does not work for old nodes
        #                        )
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(SysDictIndexShowDuplicates):
        #                    if (this.selectionCount() != 1 ||
        #                        firstNode.AOTIsOld()                               //Does not work for old nodes
        #                       )
        #                    {
        #                        return 0;
        #                    }
        #                    if (_firstType==UtilElementType::TableIndex)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(AxdWizard):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Query)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(WorkflowAOTWizardApproval):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodePath() == #WorkflowApprovalTasksPath))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(WorkflowAOTWizardTask):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodePath() == #WorkflowTasksPath))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(WorkflowAOTWizardType):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodePath() == #WorkflowTypesPath))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #                case menuitemDisplayStr(SysBPStyleCheckAnalysis):
        #                    if ((this.selectionCount() == 1) && (_firstType == UtilElementType::Form))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #            }
        #            break;
        #
        #        case MenuItemType::Output:
        #            switch (menuItemName)
        #            {
        #                case menuitemOutputStr( SysXmlDocumentationCreateFile ):
        #                    if ( firstNode.handle() == classNum(ProjectNode) &&     // Only launch from project node
        #                         match(#pathProjects,firstNode.treeNodePath()))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #            }
        #            break;
        #
        #        case MenuItemType::Action:
        #            switch (menuItemName)
        #            {
        #                case menuitemActionStr(SysUpgradeProjectMarkAsResolved):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolved(this, SysUpgradeConflictManuallyResolved::Resolved);
        #                case menuitemActionStr(SysUpgradeProjectMarkAsUnresolved):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolved(this, SysUpgradeConflictManuallyResolved::Unresolved);
        #
        #                case menuitemActionStr(SysUpgradeProjectMarkAsResolvedRecursive):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolvedIncludeSubnodes(this, SysUpgradeConflictManuallyResolved::Resolved);
        #                case menuitemActionStr(SysUpgradeProjectMarkAsUnresolvedRecursi):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolvedIncludeSubnodes(this, SysUpgradeConflictManuallyResolved::Unresolved);
        #
        #                case menuitemActionStr(SysUpgradeDetectConflictsRerun):
        #                    return SysUpgradeDetectConflicts::canDetectConflictsRerun(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleAutoResolve):
        #                    return SysUpgradeConflictCodeRuleAutoResolve::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleRevertResolve):
        #                    return SysUpgradeConflictCodeRuleRevertResolve::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleCompareUpgrade):
        #                    return SysUpgradeConflictCodeRuleCompareUpgrade::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleCompareOrigina):
        #                    return SysUpgradeConflictCodeRuleCompareOrigina::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(xRefUpdate):
        #                    if (!firstNode.AOTIsOld())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysVersionControlCheckOut):
        #                    if (versioncontrol &&
        #                        versioncontrol.parmSysVersionControlSystem() &&
        #                        this.selectionCount() == 1 && firstApplObjectNode &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        !allowEdit)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysVersionControlUndoCheckOut):
        #                    if (versioncontrol &&
        #                        versioncontrol.parmSysVersionControlSystem() &&
        #                        this.selectionCount() == 1 && firstApplObjectNode &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        allowEdit)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(xRefUpdateTmpReferences):
        #                    if (!docNode &&
        #                        this.selectionCount() == 1 && firstUtilNode &&
        #                        !firstNode.AOTIsOld())                            //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysSourceReplaceSyntax):
        #                    if (!docNode &&
        #                        firstUtilNode &&
        #                        allowEdit &&
        #                        !firstNode.AOTIsOld())                             //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysImpactAnalysis):
        #                    if (!docNode &&
        #                        firstNode.treeNodeType().isRootElement() &&
        #                        !firstNode.AOTIsOld())                               //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysSourceNameWash):
        #                    if (!docNode &&
        #                        firstUtilNode &&
        #                        allowEdit &&
        #                        !firstNode.AOTIsOld() &&
        #                        (_firstType &&
        #                          (_firstType == UtilElementType::Table                 ||
        #                           _firstType == UtilElementType::TableInstanceMethod   ||
        #                           _firstType == UtilElementType::TableStaticMethod     ||
        #                           _firstType == UtilElementType::Macro                 ||
        #                           _firstType == UtilElementType::Class                 ||
        #                           _firstType == UtilElementType::ClassInstanceMethod   ||
        #                           _firstType == UtilElementType::ClassStaticMethod     ||
        #                           _firstType == UtilElementType::Form                  ||
        #                           _firstType == UtilElementType::Report                ||
        #                           _firstType == UtilElementType::ReportTemplate        ||
        #                           _firstType == UtilElementType::ReportSectionTemplate ||
        #                           _firstType == UtilElementType::Query                 ||
        #                           _firstType == UtilElementType::Job                   ||
        #                           _firstType == UtilElementType::WebForm)))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysBPCheck):
        #                    if  (_firstType &&_firstType == UtilElementType::Job)
        #                    {
        #                        return 0;
        #                    }
        #                    if (firstNode.AOTIsOld())
        #                    {
        #                        return 0;
        #                    }
        #                    if (docNode)
        #                    {
        #                        return 0;
        #                    }
        #                    return 1;
        #
        #                case menuitemActionStr(SysSourceReplaceText):
        #                    if (!docNode &&
        #                        allowEdit &&
        #                        this.selectionCount() == 1 &&
        #                        firstUtilNode &&
        #                        !firstNode.AOTIsOld())                            //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(sysCompare):
        #                    if (_firstType == UtilElementType::PrivateProject       ||
        #                        _firstType == UtilElementType::SharedProject)
        #                    {
        #                        return 0;
        #                    }
        #                    if (this.selectionCount() == 2)
        #                    {
        #                        return 1;
        #                    }
        #                    if (this.selectionCount() == 1)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(sysCompileForward):
        #                    if (this.selectionCount() == 1 &&
        #                        !firstNode.AOTIsOld()      &&                         //Does not work for old nodes
        #                        _firstType==UtilElementType::Class)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(sysTreenodeCopyToCurrentLayer):
        #                    if (firstNode && firstNode.AOTIsOld() && firstNode.treeNodeType().isRootElement())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysTreeNodeApplObjectOpenNewWindow):
        #                    if (!docNode &&
        #                        anyUtilElementTypeSeleced &&
        #                        !firstNode.AOTIsOld())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysTreeNodeOpenNewWindow),
        #                     menuitemActionStr(SysTreeNodeShowProperties):
        #
        #                    if (docNode ||
        #                        firstNode.treeNodeType().id() == 27 ||    //Project nodes
        #                        firstNode.treeNodeType().id() == 29 ||
        #                        firstNode.treeNodeType().id() == 30 ||
        #                        firstNode.treeNodeType().id() == 31 )
        #                    {
        #                        return 0;
        #                    }
        #                    return 1;                                              //also for old
        #
        #                case menuitemActionStr(SysTreeNodeParentOpenNewWindow):
        #                    if (docNode ||
        #                        firstNode.treeNodeType().id() == 27 ||    //Project nodes
        #                        firstNode.treeNodeType().id() == 29 ||
        #                        firstNode.treeNodeType().id() == 30 ||
        #                        firstNode.treeNodeType().id() == 31 )
        #                    {
        #                        return 0;
        #                    }
        #                    if (!firstNode.AOTIsOld())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                // Open using in window
        #                case menuitemActionStr(SysOpenNewWindowTable):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowTable::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowExtendedType):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowExtendedType::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowEnum):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowEnum::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowSecurityKey):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowSecurityKey::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowConfigurationKey):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowConfigurationKey::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowClass):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowClass::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowForm):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowForm::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowReport):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowReport::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowMenuItem):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowMenuItem::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowFieldGroup):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowFieldGroup::verifyItem(this);
        #
        #                // old layer
        #                case menuitemActionStr(sysOpenOldSys):
        #                case menuitemActionStr(sysOpenOldSyp):
        #                case menuitemActionStr(sysOpenOldGls):
        #                case menuitemActionStr(sysOpenOldGlp):
        #                case menuitemActionStr(sysOpenOldFpk):
        #                case menuitemActionStr(sysOpenOldFpp):
        #                case menuitemActionStr(sysOpenOldSln):
        #                case menuitemActionStr(sysOpenOldSlp):
        #                case menuitemActionStr(sysOpenOldIsv):
        #                case menuitemActionStr(sysOpenOldIsp):
        #                case menuitemActionStr(sysOpenOldVar):
        #                case menuitemActionStr(sysOpenOldVap):
        #                case menuitemActionStr(sysOpenOldCus):
        #                case menuitemActionStr(sysOpenOldCup):
        #                case menuitemActionStr(sysOpenOldUsr):
        #                case menuitemActionStr(sysOpenOldUsp):
        #                    utilEntryLevel = str2enum(utilEntryLevel, subStr(menuItemName, strLen(menuItemName)-2, 3));
        #                    if (this.selectionCount() == 1 &&
        #                        oldMask & (1 << utilEntryLevel))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                // Test jobs
        #                case menuitemActionStr(SysTestToolbarOpen):
        #                    if (this.selectionCount() == 1)
        #                    {
        #                        switch (firstNode.handle())
        #                        {
        #                            case classNum(ProjectNode):
        #                            case classNum(ProjectGroupNode):
        #                                return 1;
        #
        #                            case classNum(ClassNode):
        #                                classNode = firstNode;
        #                                if (classNode &&
        #                                    (SysTestProject::implementsSysTestable(classNode.iD()) ||
        #                                     SysDictClass::isSuperclass(classNode.iD(), classNum(SysTestSuite))))
        #
        #                                {
        #                                    return 1;
        #                                }
        #                                return 0;
        #
        #                            case classNum(MemberFunction):
        #                                parentNode = firstNode.AOTparent();
        #                                if (parentNode &&
        #                                    (parentNode.handle() == classNum(ClassNode) || parentNode is ClassNode) &&
        #                                    SysTestProject::implementsSysTestable(parentNode.applObjectId()))
        #                                {
        #                                    testable = classfactory.createClass(parentNode.applObjectId(), false) as SysTestable;
        #                                    if (testable)
        #                                    {
        #                                        listEnumerator = testable.testMethods().getEnumerator();
        #                                        while (listEnumerator.moveNext())
        #                                        {
        #                                            if (listEnumerator.current() == firstNode.treeNodeName())
        #                                                return 1;
        #                                        }
        #                                    }
        #                                }
        #                                return 0;
        #                        }
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(AxdGenerateAxdQuery):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Form     ||
        #                       _firstType == UtilElementType::Report   ||
        #                       _firstType == UtilElementType::WebForm )
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(AifRegisterService):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Service)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysXppILIncrementalBuild):
        #                case menuitemActionStr(SysXppILFullBuild):
        #                    // enable for AOT root node only
        #                    return firstNode.treeNodeType().id() == 1;
        #                case menuitemActionStr(SysSecSecurityApply):
        #                    return SysSecHelper::showApplyChangesContextMenu(firstNode);
        #                // >> DEV:MXK >>
        #                case menuItemActionStr(DEV_TableMethodsGenerator):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Table)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuItemDisplayStr(DEV_QueryBrowser):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Query)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #                // << DEV:MXK <<
        #            }
        #    }
        #//    infolog.mayReloadMenu(true);
        #
        #    if (firstNode.AOTIsOld())
        #        return 0;
        #    return 1;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
